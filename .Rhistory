json_file <- "SeattleYelpRestaurantsWithCategory.json"
yelp.data <- fromJSON(json_file) %>% filter(!is.na(price)) %>% filter(!is.na(reviewCount)) %>% filter(!is.na(censusMedianHHIncome)) %>% filter(!is.na(censusIncomePerCapita)) %>% filter(!is.na(censusGiniIndexOfInequality)) %>% filter(!is.na(rating)) %>% filter(!is.na(category))
low <- quantile(yelp.data$censusMedianHHIncome, 0.33) # cutoff number
high <- quantile(yelp.data$censusMedianHHIncome, 0.66) # cutoff number
price.num <- c(nchar(yelp.data[,"price"]))
filtered.yelp.w.census$price = price.num
below.avg <- yelp.data %>% filter(censusMedianHHIncome < low)
above.avg <- yelp.data %>% filter(censusMedianHHIncome > high)
below.avg.wo.census <- subset(below.avg, select=c("reviewCount", "price", "rating"))
above.avg.wo.census <- subset(above.avg, select=c("reviewCount", "price", "rating"))
View(below.avg)
json_file <- "SeattleYelpRestaurantsWithCategory.json"
yelp.data <- fromJSON(json_file) %>% filter(!is.na(price)) %>% filter(!is.na(reviewCount)) %>% filter(!is.na(censusMedianHHIncome)) %>% filter(!is.na(censusIncomePerCapita)) %>% filter(!is.na(censusGiniIndexOfInequality)) %>% filter(!is.na(rating)) %>% filter(!is.na(category))
price.num <- c(nchar(yelp.data[,"price"]))
filtered.yelp.w.census$price = price.num
low <- quantile(yelp.data$censusMedianHHIncome, 0.33) # cutoff number
high <- quantile(yelp.data$censusMedianHHIncome, 0.66) # cutoff number
below.avg <- yelp.data %>% filter(censusMedianHHIncome < low)
above.avg <- yelp.data %>% filter(censusMedianHHIncome > high)
below.avg.wo.census <- subset(below.avg, select=c("reviewCount", "price", "rating"))
above.avg.wo.census <- subset(above.avg, select=c("reviewCount", "price", "rating"))
View(below.avg)
price.num <- c(nchar(yelp.data[,"price"]))
yelp.data$price = price.num
low <- quantile(yelp.data$censusMedianHHIncome, 0.33) # cutoff number
high <- quantile(yelp.data$censusMedianHHIncome, 0.66) # cutoff number
below.avg <- yelp.data %>% filter(censusMedianHHIncome < low)
above.avg <- yelp.data %>% filter(censusMedianHHIncome > high)
below.avg.wo.census <- subset(below.avg, select=c("reviewCount", "price", "rating"))
above.avg.wo.census <- subset(above.avg, select=c("reviewCount", "price", "rating"))
View(below.avg.wo.census)
mid.avg <- yelp.data %>% filter(censusMedianHHIncome < high $ censusMedianHHIncome > low)
mid.avg <- yelp.data %>% filter(censusMedianHHIncome < high & censusMedianHHIncome > low)
nrow(mid.avg)
# Getting and filtering data
json_file <- "SeattleYelpRestaurantsWithCategory.json"
yelp.data <- fromJSON(json_file) %>% filter(!is.na(price)) %>% filter(!is.na(reviewCount)) %>% filter(!is.na(censusMedianHHIncome)) %>% filter(!is.na(censusIncomePerCapita)) %>% filter(!is.na(censusGiniIndexOfInequality)) %>% filter(!is.na(rating)) %>% filter(!is.na(category))
# convert price into numeric value
price.num <- c(nchar(yelp.data[,"price"]))
yelp.data$price = price.num
# define the low/high quantile threshold by MedianHHincome
low <- quantile(yelp.data$censusMedianHHIncome, 0.33) # cutoff number
high <- quantile(yelp.data$censusMedianHHIncome, 0.66) # cutoff number
# filter data into 2 distinct set: high SES and low SES
above.avg <- yelp.data %>% filter(censusMedianHHIncome > high)
below.avg <- yelp.data %>% filter(censusMedianHHIncome < low)
mid.avg <- yelp.data %>% filter(censusMedianHHIncome < high & censusMedianHHIncome > low)
# filter data to only have relating variables: reviewCount, price and rating
above.avg.wo.census <- subset(above.avg, select=c("reviewCount", "price", "rating"))
below.avg.wo.census <- subset(below.avg, select=c("reviewCount", "price", "rating"))
# yelp restaurants with all variables/feature
filtered.yelp.w.census <- subset(yelp.data, select=c("reviewCount", "censusMedianHHIncome", "censusIncomePerCapita", "censusGiniIndexOfInequality", "category", "price"))
if(!require(ggmap)){install.packages("ggmap"); library(ggmap)}
# load Google Maps
if(!require(ggmap)){install.packages("ggmap"); library(ggmap)}
``` {r, echo=FALSE, include=FALSE}
mapgilbert <- get_map(location = c(lon = mean(yelp.data$longitude), lat = mean(yelp.data$latitude)), zoom = 11, maptype = "roadmap", scale = "auto")
# plotting the map with some points on it
ggmap(mapgilbert) +
geom_point(data = yelp.data, aes(x = yelp.data$longitude, y = yelp.data$latitude, fill = "red", alpha = 0.8), size = 2, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
View(filtered.yelp.w.census)
View(yelp.data)
# Getting and filtering data
json_file <- "SeattleYelpRestaurantsWithCategory.json"
yelp.data <- fromJSON(json_file) %>% filter(!is.na(price)) %>% filter(!is.na(reviewCount)) %>% filter(!is.na(censusMedianHHIncome)) %>% filter(!is.na(censusIncomePerCapita)) %>% filter(!is.na(censusGiniIndexOfInequality)) %>% filter(!is.na(rating)) %>% filter(!is.na(category)) %>% filter(!is.na(censusTract))
# convert price into numeric value
price.num <- c(nchar(yelp.data[,"price"]))
yelp.data$price = price.num
# define the low/high quantile threshold by MedianHHincome
low <- quantile(yelp.data$censusMedianHHIncome, 0.33) # cutoff number
high <- quantile(yelp.data$censusMedianHHIncome, 0.66) # cutoff number
# filter data into 2 distinct set: high SES and low SES
above.avg <- yelp.data %>% filter(censusMedianHHIncome > high)
below.avg <- yelp.data %>% filter(censusMedianHHIncome < low)
mid.avg <- yelp.data %>% filter(censusMedianHHIncome < high & censusMedianHHIncome > low)
# filter data to only have relating variables: reviewCount, price and rating
above.avg.wo.census <- subset(above.avg, select=c("reviewCount", "price", "rating"))
below.avg.wo.census <- subset(below.avg, select=c("reviewCount", "price", "rating"))
# yelp restaurants with all variables/feature
filtered.yelp.w.census <- subset(yelp.data, select=c("reviewCount", "censusTract", "censusMedianHHIncome", "censusIncomePerCapita", "censusGiniIndexOfInequality", "category", "price"))
mapgilbert <- get_map(location = c(lon = mean(yelp.data$longitude), lat = mean(yelp.data$latitude)), zoom = 11, maptype = "roadmap", scale = "auto")
# plotting the map with some points on it
ggmap(mapgilbert) +
geom_point(data = yelp.data, aes(x = yelp.data$longitude, y = yelp.data$latitude, fill = "red", alpha = 0.8), size = 2, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
ggplot(above.avg, mapping = aes(above.avg$censusTract) +geom_histogram()
ggplot(above.avg, mapping = aes(above.avg$censusTract) +geom_histogram()
ggplot(above.avg, mapping = aes(above.avg$censusTract) +geom_histogram())
ggplot(above.avg, mapping = aes(as.factor(above.avg$censusTract)) +geom_histogram())
ggplot(above.avg, mapping = aes(above.avg$censusTract) +geom_histogram())
# Getting and filtering data
json_file <- "SeattleYelpRestaurantsWithCategory.json"
yelp.data <- fromJSON(json_file) %>% filter(!is.na(price)) %>% filter(!is.na(reviewCount)) %>% filter(!is.na(censusMedianHHIncome)) %>% filter(!is.na(censusIncomePerCapita)) %>% filter(!is.na(censusGiniIndexOfInequality)) %>% filter(!is.na(rating)) %>% filter(!is.na(category)) %>% filter(!is.na(censusTract))
# convert price into numeric value
price.num <- c(nchar(yelp.data[,"price"]))
yelp.data$price = price.num
# convert censusTract to numeric value
tract.num <- c(nchar(yelp.data[,"censusTract"]))
yelp.data$censusTract = tract.num
# define the low/high quantile threshold by MedianHHincome
low <- quantile(yelp.data$censusMedianHHIncome, 0.33) # cutoff number
high <- quantile(yelp.data$censusMedianHHIncome, 0.66) # cutoff number
# filter data into 2 distinct set: high SES and low SES
above.avg <- yelp.data %>% filter(censusMedianHHIncome > high)
below.avg <- yelp.data %>% filter(censusMedianHHIncome < low)
mid.avg <- yelp.data %>% filter(censusMedianHHIncome < high & censusMedianHHIncome > low)
# filter data to only have relating variables: reviewCount, price and rating
# this dataset is used for modeling
above.avg.wo.census <- subset(above.avg, select=c("reviewCount", "price", "rating"))
below.avg.wo.census <- subset(below.avg, select=c("reviewCount", "price", "rating"))
# yelp restaurants with all variables/feature
filtered.yelp.w.census <- subset(yelp.data, select=c("reviewCount", "censusTract", "censusMedianHHIncome", "censusIncomePerCapita", "censusGiniIndexOfInequality", "category", "price"))
ggplot(above.avg, mapping = aes(above.avg$censusTract) +geom_histogram())
ggplot(data= above.avg, mapping = aes(above.avg$censusTract) +geom_histogram())
ggplot(data= above.avg, aes(above.avg$censusTract) +geom_histogram())
ggplot(data= above.avg, aes(above.avg$censusTract)) +geom_histogram()
highSES <- ggplot(data= above.avg, aes(above.avg$censusTract)) +geom_histogram()
highSES
highSES <- ggplot(data= above.avg, aes(above.avg$censusTract)) +geom_histogram()
midSES <- ggplot(data= mid.avg, aes(mid.avg$censusTract)) +geom_histogram()
belowSES <- ggplot(data= below.avg, aes(below.avg$censusTract)) +geom_histogram()
lowSES <- ggplot(data= below.avg, aes(below.avg$censusTract)) +geom_histogram()
highSES
midSES
lowSES
lowSES
lowSES <- ggplot(data= below.avg, aes(below.avg$censusTract)) +geom_histogram()
lowSES
highSES
midSES
midSES
# Getting and filtering data
json_file <- "SeattleYelpRestaurantsWithCategory.json"
yelp.data <- fromJSON(json_file) %>% filter(!is.na(price)) %>% filter(!is.na(reviewCount)) %>% filter(!is.na(censusMedianHHIncome)) %>% filter(!is.na(censusIncomePerCapita)) %>% filter(!is.na(censusGiniIndexOfInequality)) %>% filter(!is.na(rating)) %>% filter(!is.na(category)) %>% filter(!is.na(censusTract))
# convert price into numeric value
price.num <- c(nchar(yelp.data[,"price"]))
yelp.data$price = price.num
# convert censusTract to numeric value
#tract.num <- c(nchar(yelp.data[,"censusTract"]))
#yelp.data$censusTract = tract.num
# define the low/high quantile threshold by MedianHHincome
low <- quantile(yelp.data$censusMedianHHIncome, 0.33) # cutoff number
high <- quantile(yelp.data$censusMedianHHIncome, 0.66) # cutoff number
# filter data into 2 distinct set: high SES and low SES
above.avg <- yelp.data %>% filter(censusMedianHHIncome > high)
below.avg <- yelp.data %>% filter(censusMedianHHIncome < low)
mid.avg <- yelp.data %>% filter(censusMedianHHIncome < high & censusMedianHHIncome > low)
# filter data to only have relating variables: reviewCount, price and rating
# this dataset is used for modeling
above.avg.wo.census <- subset(above.avg, select=c("reviewCount", "price", "rating"))
below.avg.wo.census <- subset(below.avg, select=c("reviewCount", "price", "rating"))
# yelp restaurants with all variables/feature
filtered.yelp.w.census <- subset(yelp.data, select=c("reviewCount", "censusTract", "censusMedianHHIncome", "censusIncomePerCapita", "censusGiniIndexOfInequality", "category", "price"))
highSES <- ggplot(data= above.avg, aes(above.avg$censusTract)) +geom_histogram()
midSES <- ggplot(data= mid.avg, aes(mid.avg$censusTract)) +geom_histogram()
lowSES <- ggplot(data= below.avg, aes(below.avg$censusTract)) +geom_histogram()
highSES
??ggplot
highSES <- ggplot(data= above.avg, stat="count", aes(above.avg$censusTract)) +geom_histogram()
highSES
highSES <- ggplot(data= above.avg, aes(above.avg$censusTract, stat="count")) +geom_histogram()
highSES
highSES <- ggplot(data= above.avg, aes(above.avg$censusTract)) +geom_histogram(stat="count")
highSES <- ggplot(data= above.avg, aes(above.avg$censusTract)) +geom_histogram()
highSES
yelp.data$censusTract = as.factor(yelp.data$censusTract)
highSES <- ggplot(data= above.avg, aes(above.avg$censusTract)) +geom_histogram()
midSES <- ggplot(data= mid.avg, aes(mid.avg$censusTract)) +geom_histogram()
lowSES <- ggplot(data= below.avg, aes(below.avg$censusTract)) +geom_histogram()
highSES
highSES <- ggplot(data= above.avg, aes(above.avg$censusTract)) +geom_histogram() + stat_bin(stat="count")
highSES <- ggplot(data= above.avg, aes(above.avg$censusTract)) +geom_bar()
highSES
as.data.frame(table(above.avg))
as.data.frame(table(above.avg$censusTract))
as.data.frame(table(below.avg$censusTract))
highSES <- ggplot(data= arrange(above.avg,censusHHIncome), aes(above.avg$censusTract)) +geom_bar()
highSES <- ggplot(data= arrange(above.avg,censusMedianHHIncome), aes(above.avg$censusTract)) +geom_bar()
highSES
highSES <- ggplot(data= arrange(above.avg,censusMedianHHIncome), aes(above.avg$censusTract)) +geom_bar()
midSES <- ggplot(data= arrange(mid.avg,censusMedianHHIncome), aes(mid.avg$censusTract)) +geom_histogram()
lowSES <- ggplot(data= arrange(below.avg,censusMedianHHIncome), aes(below.avg$censusTract)) +geom_histogram()
highSES
midSES
# Getting and filtering data
json_file <- "SeattleYelpRestaurantsWithCategory.json"
yelp.data <- fromJSON(json_file) %>% filter(!is.na(price)) %>% filter(!is.na(reviewCount)) %>% filter(!is.na(censusMedianHHIncome)) %>% filter(!is.na(censusIncomePerCapita)) %>% filter(!is.na(censusGiniIndexOfInequality)) %>% filter(!is.na(rating)) %>% filter(!is.na(category)) %>% filter(!is.na(censusTract))
# convert price into numeric value
price.num <- c(nchar(yelp.data[,"price"]))
yelp.data$price = price.num
# convert censusTract to numeric value
#tract.num <- c(nchar(yelp.data[,"censusTract"]))
#yelp.data$censusTract = as.factor(yelp.data$censusTract)
# define the low/high quantile threshold by MedianHHincome
low <- quantile(yelp.data$censusMedianHHIncome, 0.33) # cutoff number
high <- quantile(yelp.data$censusMedianHHIncome, 0.66) # cutoff number
# filter data into 2 distinct set: high SES and low SES
above.avg <- yelp.data %>% filter(censusMedianHHIncome > high)
below.avg <- yelp.data %>% filter(censusMedianHHIncome < low)
mid.avg <- yelp.data %>% filter(censusMedianHHIncome < high & censusMedianHHIncome > low)
# filter data to only have relating variables: reviewCount, price and rating
# this dataset is used for modeling
above.avg.wo.census <- subset(above.avg, select=c("reviewCount", "price", "rating"))
below.avg.wo.census <- subset(below.avg, select=c("reviewCount", "price", "rating"))
# yelp restaurants with all variables/feature
filtered.yelp.w.census <- subset(yelp.data, select=c("reviewCount", "censusTract", "censusMedianHHIncome", "censusIncomePerCapita", "censusGiniIndexOfInequality", "category", "price"))
highSES <- ggplot(data= arrange(above.avg,censusMedianHHIncome), aes(above.avg$censusTract)) +geom_bar()
midSES <- ggplot(data= arrange(mid.avg,censusMedianHHIncome), aes(mid.avg$censusTract)) +geom_bar()
lowSES <- ggplot(data= arrange(below.avg,censusMedianHHIncome), aes(below.avg$censusTract)) +geom_bar()
highSES
midSES
lowSES
highSES
midSES
lowSES
highSES <- ggplot(data= arrange(above.avg,censusMedianHHIncome), aes(above.avg$censusTract)) +geom_bar() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
highSES
highSES <- ggplot(data= arrange(above.avg,censusMedianHHIncome), aes(above.avg$censusTract)) +geom_bar() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
midSES <- ggplot(data= arrange(mid.avg,censusMedianHHIncome), aes(mid.avg$censusTract)) +geom_bar() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
lowSES <- ggplot(data= arrange(below.avg,censusMedianHHIncome), aes(below.avg$censusTract)) +geom_bar() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
highSES
midSES
lowSES
rating.data <- yelp.data %>% mutate(SESMedianHH = ifelse(censusMedianHHIncome < 62133, "Low SES",
ifelse(censusMedianHHIncome > 85696, "High SES", "Mid SES")))
ratingFreq <- table(rating.data$price,rating.data$SESMedianHH)
View(ratingFreq)
restaurantsByPrice <- ggplot(ratingFreq, aes(fill=Var2, y=Freq, x=Var1)) +
geom_bar( stat="identity", position="fill")
ratingFreq <- as.dataframe(table(rating.data$price,rating.data$SESMedianHH))
ratingFreq <- as.data.frame(table(rating.data$price,rating.data$SESMedianHH))
restaurantsByPrice <- ggplot(ratingFreq, aes(fill=Var2, y=Freq, x=Var1)) +
geom_bar( stat="identity", position="fill")
restaurantsByPrice
restaurantsByPrice <- ggplot(ratingFreq, aes(fill=Var2, y=Freq, x=Var1)) +
geom_bar( stat="dodge", position="fill")
restaurantsByPrice <- ggplot(ratingFreq, aes(fill=Var2, y=Freq, x=Var1)) +
geom_bar( stat="identity", position="dodge")
restaurantsByPrice
ratingFreq <- as.data.frame(table(rating.data$price,rating.data$SESMedianHH),percentage=Freq/nrow(rating.data))
restaurantsByPrice <- ggplot(ratingFreq, aes(fill=Var2, y=Freq, x=Var1)) +
geom_bar( stat="identity", position="dodge")
restaurantsByPrice
View(ratingFreq)
ratingFreq <- as.data.frame(table(rating.data$price,rating.data$SESMedianHH))
ratingFreq <- mutate(percentage = Freq/sum(Freq))
ratingFreq <- mutate(percentage = Freq)
ratingFreq$percentage = ratingFreq$Freq / sum(ratingFreq$Freq)
sum(ratingFreq$percentage)
rating.data <- yelp.data %>% mutate(SESMedianHH = ifelse(censusMedianHHIncome < 62133, "Low SES",
ifelse(censusMedianHHIncome > 85696, "High SES", "Mid SES")))
ratingFreq <- as.data.frame(table(rating.data$price,rating.data$SESMedianHH))
ratingFreq$percentage = ratingFreq$Freq / sum(ratingFreq$Freq)
restaurantsByPrice <- ggplot(ratingFreq, aes(fill=Var2, y=Freq, x=Var1)) +
geom_bar( stat="identity", position="dodge")
restaurantsByPrice
restaurantsByPrice
restaurantsByPrice <- ggplot(percentage, aes(fill=Var2, y=Freq, x=Var1)) +
geom_bar( stat="identity", position="dodge")
restaurantsByPrice <- ggplot(ratingFreq, aes(fill=Var2, y=percentage, x=Var1)) +
geom_bar( stat="identity", position="dodge")
restaurantsByPrice
restaurantsByPrice <- ggplot(ratingFreq, aes(fill=Var2, y=Freq, x=Var1)) +
geom_bar( stat="identity", position="dodge")
restaurantsByPrice
priceFreq <- as.data.frame(table(rating.data$price,rating.data$SESMedianHH))
priceFreq$percentage = priceFreq$Freq / sum(priceFreq$Freq)
restaurantsByPrice <- ggplot(priceFreq, aes(fill=Var2, y=Freq, x=Var1)) +
geom_bar( stat="identity", position="dodge")
restaurantsByPrice
ratingFreq <- as.data.frame(table(yelp.data$rating))
View(ratingFreq)
restaurantsByRating <- ggplot(ratingFreq, aes(y=Freq, x=Var1)) +
geom_bar( stat="identity", position="dodge")
restaurantsByRating
restaurantsByRating <- ggplot(ratingFreq, aes(y=Freq, x=Var1)) +
geom_line()
restaurantsByRating
restaurantsByRating <- ggplot(ratingFreq, aes(y=Freq, x=Var1)) +
geom_path()
restaurantsByRating
restaurantsByRating <- ggplot(ratingFreq, aes(y=Freq, x=Var1,group=1)) +
geom_path()
restaurantsByRating
ratingFreq$percentage = ratingFreq$Freq / sum(ratingFreq$Freq)
restaurantsByRating <- ggplot(ratingFreq, aes(y=Freq, x=Var1,group=1)) +
geom_path()
restaurantsByRating
restaurantsByRating <- ggplot(ratingFreq, aes(y=percentage, x=Var1,group=1)) +
geom_path()
restaurantsByRating
restaurantsByRating <- ggplot(ratingFreq, aes(y=percentage, x=Var1,group=1)) +
geom_smooth()
restaurantsByRating
restaurantsByRating <- ggplot(ratingFreq, aes(y=percentage, x=Var1,group=1)) +
geom_line()
restaurantsByRating <- ggplot(ratingFreq, aes(y=percentage, x=Var1,group=1)) +
geom_line()
restaurantsByRating
ratingViolinPlot <- ggplot(yelp.data, aes(as.factor(rating), censusHHMedianIncome)) +
geom_violin() +
geom_boxplot(width=0.1) +
stat_summary(fun.y=mean, geom="point", shape=23, size=2, color="blue") +
stat_summary(fun.y=median, geom="point", size=2, color="red")
ratingViolinPlot
ratingViolinPlot <- ggplot(yelp.data, aes(as.factor(rating), censusMedianHHIncome)) +
geom_violin() +
geom_boxplot(width=0.1) +
stat_summary(fun.y=mean, geom="point", shape=23, size=2, color="blue") +
stat_summary(fun.y=median, geom="point", size=2, color="red")
ratingViolinPlot
restaurantsByPrice <- ggplot(priceFreq, aes(fill=Var2, y=Freq, x=Var1)) +
geom_bar( stat="identity", position="dodge")
restaurantsByPrice
cor(yelp.data$rating,yelp.data$reviewCount)
subway_lm_high <- train(rating ~ reviewCount,
data = above.avg.subway.train,
method = "lm")
View(above.avg.subway.train %>% select(rating,reviewCount))
ctrl <- trainControl(method = "repeatedcv", number=5, repeats=3) # 10 fold cross-validation, repeated 3 times. better way to do it but takes longer.
subway_lm_high <- train(rating ~ reviewCount,
data = above.avg.subway.train,
method = "lm",
trControl=ctrt)
subway_lm_high <- train(rating ~ reviewCount,
data = above.avg.subway.train,
method = "lm",
trControl=ctrl)
ctrl <- trainControl(method = "repeatedcv", number=5, repeats=3) # 10 fold cross-validation, repeated 3 times. better way to do it but takes longer.
subway_lm_high <- train(rating ~ reviewCount,
data = above.avg.subway.train,
method = "lm",
trControl=ctrl)
summary(subway_lm_high)
unique(yelp.data$category)
table(yelp.data$category)
View(table(yelp.data$category))
# total number of restaurants we're observing; we filter out restaurants that don't have PriceLevel, Category, and Rating
nrow(yelp.data)
# total number of restaurants we're observing; we filter out restaurants that don't have PriceLevel, Category, and Rating
nrow(yelp.data)
# all category
table(yelp.data$category)
# total number of restaurants we're observing; we filter out restaurants that don't have PriceLevel, Category, and Rating
nrow(yelp.data)
# all category
as.data.frame(table(yelp.data$category))
allCategory <- as.data.frame(table(yelp.data$category))
#total category
nrow(allCategory)
restaurantCount <- nrow(yelp.data)
restaurantCount
# total number of restaurants we're observing; we filter out restaurants that don't have PriceLevel, Category, and Rating
restaurantCount <- nrow(yelp.data)
restaurantCount
# all category types
allCategory <- as.data.frame(table(yelp.data$category))
allCategory
#total category
categoryCount <- nrow(allCategory)
categoryCount
low
high
View(table(minor.enrollment$ethnicity))
list.of.packages <- c("knitr", "car", "reshape2", "dplyr", "gplots", "gplot2")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos="http://cran.rstudio.com/")
knitr::opts_chunk$set(echo = TRUE)
library("car")
library("reshape2")
library("dplyr")
library("gplots")
minor.enrollment <- read.csv("MinoritiesEnrollmentData.csv")
major.enrollment <- read.csv("NonMinoritiesEnrollmentData.csv")
sum.underrepresented <- group_by(minor.enrollment,year) %>% summarize(percentage = sum(percentage), number = sum(number))
sum.nonURM <- group_by(major.enrollment,year) %>% summarize(percentage = sum(percentage), number = sum(number))
View(table(minor.enrollment$ethnicity))
AnAi <- filter(minor.enrollment, ethnicty %in% "AI/AN")
AnAi <- filter(minor.enrollment, ethnicity %in% "AI/AN")
View(AnAi)
test.mod <- lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "AI/AN"))
summary(test.mod)
test2.mod <- lm(formula = percentage ~ year, data = AnAi)
summary(test2.mod)
test.mod <- lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "AI/AN"))
summary(test.mod)
minoritystudents.mod = lm(formula = percentage ~ year, data = sum.underrepresented)
summary(minoritystudents.mod)
#anova(minoritystudents.mod)
AnAi.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "AI/AN"))
summary(AnAi.mod)
black.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Black"))
summary(black.mod)
burmese.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Burmese"))
cambodian.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Cambodian"))
cham.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Cham"))
filipino.mod= lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Filipino"))
hawpac.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "HAW/PAC"))
hmong.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Hmong"))
lao.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Laotian"))
latino.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Latino"))
mien.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Mien"))
viet.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Vietnamese"))
#minoritystudents.mod = lm(formula = percentage ~ year, data = sum.underrepresented)
#summary(minoritystudents.mod)
#anova(minoritystudents.mod)
AnAi.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "AI/AN"))
summary(AnAi.mod)
black.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Black"))
summary(black.mod)
burmese.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Burmese"))
summary(burmese.mod)
cambodian.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Cambodian"))
summary(cambodian.mod)
cham.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Cham"))
summary(cham.mod)
filipino.mod= lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Filipino"))
summary(filipino.mod)
hawpac.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "HAW/PAC"))
summary(hawpac.mod)
hmong.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Hmong"))
summary(hmong.mod)
lao.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Laotian"))
summary(lao.mod)
latino.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Latino"))
summary(latino.mod)
mien.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Mien"))
summary(mien.mod)
viet.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Vietnamese"))
summary(viet.mod)
#minoritystudents.mod = lm(formula = percentage ~ year, data = sum.underrepresented)
#summary(minoritystudents.mod)
#anova(minoritystudents.mod)
AnAi.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "AI/AN"))
summary(AnAi.mod)
black.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Black"))
summary(black.mod)
burmese.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Burmese"))
summary(burmese.mod)
cambodian.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Cambodian"))
summary(cambodian.mod)
cham.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Cham"))
summary(cham.mod)
hawpac.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "HAW/PAC"))
summary(hawpac.mod)
hmong.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Hmong"))
summary(hmong.mod)
lao.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Laotian"))
summary(lao.mod)
mien.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Mien"))
summary(mien.mod)
viet.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Vietnamese"))
summary(viet.mod)
#minoritystudents.mod = lm(formula = percentage ~ year, data = sum.underrepresented)
#summary(minoritystudents.mod)
#anova(minoritystudents.mod)
AnAi.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "AI/AN"))
summary(AnAi.mod)
burmese.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Burmese"))
summary(burmese.mod)
cham.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Cham"))
summary(cham.mod)
hmong.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Hmong"))
summary(hmong.mod)
lao.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Laotian"))
summary(lao.mod)
mien.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Mien"))
summary(mien.mod)
viet.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Vietnamese"))
summary(viet.mod)
cham.mod$coefficients
cham.mod$effects
cham.mod$estimate
cham.mod$residuals
cham.mod$rank
cham.mod$fitted.values
cham.mod$model
cham.mod$terms
cham.mod$assign
cham.mod$df.residual
cham.mod$coefficients
cham.mod$coefficients
c(AnAi.mod$coefficients,burmese.mod$coefficients)
View(c(AnAi.mod$coefficients,burmese.mod$coefficients))
View(as.data.frame(c(AnAi.mod$coefficients,burmese.mod$coefficients)))
a = c(AnAi.mod$coefficients,burmese.mod$coefficients)
b = c("An/Ai","Burmese")
View(data.frame(a,b))
a = data.frame(AnAi.mod$coefficients,burmese.mod$coefficients)
View(a)
View(t(a))
a = data.frame(AnAi.mod$coefficients,burmese.mod$coefficients,cham.mod$coefficients,hmong.mod$coefficients,lao.mod$coefficients,mien.mod$coefficients,viet.mod$coefficients)
notSignificant = t(a)
View(notSignificant)
b = data.frame(cambodian.mod$coefficients,hawpac.mod$coefficients,black.mod$coefficients)
somewhatSignificant = t(b)
View(somewhatSignificant)
c= data.frame(latino.mod$coefficients, filipino.mod$coefficients)
significant = t(c)
View(significant)
latino.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Latino"))
summary(latino.mod)
filipino.mod= lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Filipino"))
summary(filipino.mod)
vietnamese.mod = lm(formula = percentage ~ year, data = filter(minor.enrollment, ethnicity %in% "Vietnamese"))
a = data.frame(AnAi.mod$coefficients,burmese.mod$coefficients,cham.mod$coefficients,hmong.mod$coefficients,lao.mod$coefficients,mien.mod$coefficients,vietnamese.mod$coefficients)
notSignificant = t(a)
View(notSignificant)
notSignificant
somewhatSignificant
significant
